class WordDictionary {

    // TrieNode definition
    private static class TrieNode {
        TrieNode[] children;
        boolean isEndOfWord;

        TrieNode() {
            children = new TrieNode[26];
            isEndOfWord = false;
        }
    }

    private final TrieNode root;

    // Constructor
    public WordDictionary() {
        root = new TrieNode();
    }

    // Add word to Trie
    public void addWord(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int index = c - 'a';
            if (node.children[index] == null) {
                node.children[index] = new TrieNode();
            }
            node = node.children[index];
        }
        node.isEndOfWord = true;
    }

    // Search word with support for '.' wildcard
    public boolean search(String word) {
        return dfsSearch(word.toCharArray(), 0, root);
    }

    // DFS Helper function
    private boolean dfsSearch(char[] word, int index, TrieNode node) {
        if (index == word.length) {
            return node.isEndOfWord;
        }

        char c = word[index];
        if (c == '.') {
            // Try all possible paths
            for (TrieNode child : node.children) {
                if (child != null && dfsSearch(word, index + 1, child)) {
                    return true;
                }
            }
            return false;
        } else {
            int childIndex = c - 'a';
            TrieNode next = node.children[childIndex];
            return next != null && dfsSearch(word, index + 1, next);
        }
    }
}

import java.util.*;

class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> result = new ArrayList<>();
        int n = words.length;
        int i = 0;
        
        while (i < n) {
            int lineLen = words[i].length();
            int j = i + 1;
            
            // Step 1: Find the number of words fitting in this line
            while (j < n && lineLen + words[j].length() + (j - i) <= maxWidth) {
                lineLen += words[j].length();
                j++;
            }
            
            int numWords = j - i;
            int totalSpaces = maxWidth - lineLen;
            StringBuilder sb = new StringBuilder();
            
            // Step 2: Build line
            // Case A: Last line OR one word line -> left justified
            if (j == n || numWords == 1) {
                for (int k = i; k < j; k++) {
                    sb.append(words[k]);
                    if (k < j - 1) sb.append(" ");
                }
                // Pad remaining spaces
                while (sb.length() < maxWidth) {
                    sb.append(" ");
                }
            } else {
                // Case B: Fully justified line
                int spacePerGap = totalSpaces / (numWords - 1);
                int extraSpaces = totalSpaces % (numWords - 1);
                
                for (int k = i; k < j; k++) {
                    sb.append(words[k]);
                    if (k < j - 1) { // not last word
                        for (int s = 0; s < spacePerGap; s++) sb.append(" ");
                        if (extraSpaces > 0) {
                            sb.append(" ");
                            extraSpaces--;
                        }
                    }
                }
            }
            
            result.add(sb.toString());
            i = j; // Move to next line
        }
        
        return result;
    }
}
